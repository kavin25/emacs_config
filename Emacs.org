#+TITLE: Emacs Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#package-system-setup][Package System Setup]]
- [[#basic-ui-configuration][Basic UI Configuration]]
  - [[#font-configuration][Font Configuration]]
- [[#keybinding-configuration][Keybinding Configuration]]
- [[#ui-configuration][UI Configuration]]
  - [[#command-log-mode][Command Log Mode]]
  - [[#ivy-and-counsel][Ivy and Counsel]]
  - [[#helpful-help-commands][Helpful Help Commands]]
  - [[#autopair-config][Autopair Config]]
  - [[#text-scaling][Text Scaling]]
- [[#org-mode][Org Mode]]
  - [[#basic-config][Basic Config]]
    - [[#setup][Setup]]
    - [[#font-configuration][Font Configuration]]
    - [[#use-org][Use Org]]
    - [[#tag-list][Tag List]]
    - [[#custom-commands][Custom Commands]]
    - [[#capture-templates][Capture Templates]]
    - [[#org-mode-ui][Org mode UI]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#org-special-block][Org Special Block]]
  - [[#table-of-contents][Table of Contents]]
  - [[#create-template][Create Template]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#org-wild-notifier-check][Org-wild-notifier-check]]
- [[#utilities][Utilities]]
  - [[#counsel-osx-app][Counsel OSX App]]
  - [[#elcord-discord][Elcord (Discord)]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
    - [[#configuration][Configuration]]
  - [[#lorem-ipsum][Lorem Ipsum]]
- [[#credential-management][Credential Management]]
- [[#applications][Applications]]
  - [[#some-app][Some App]]
:END:
* Package System Setup
#+begin_src emacs-lisp
      (require 'package)

      (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                               ("org" . "https://orgmode.org/elpa/")
                               ("elpa" . "https://elpa.gnu.org/packages/")))

      (package-initialize)
      (unless package-archive-contents
      (package-refresh-contents))

      ;; Initialize use-package on non-Linux platforms
      (unless (package-installed-p 'use-package)
      (package-install 'use-package))

      (require 'use-package)
      (setq use-package-always-ensure t)

  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))

#+end_src
* Basic UI Configuration

#+begin_src emacs-lisp

(defvar runemacs/default-font-size 135)

(setq inhibit-startup-message t)

(scroll-bar-mode -1)        ; Disable visible scrollbar
(tool-bar-mode -1)          ; Disable the toolbar
(tooltip-mode -1)           ; Disable tooltips
(set-fringe-mode 10)        ; Give some breathing room

(menu-bar-mode -1)            ; Disable the menu bar

(set-frame-parameter (selected-frame) 'alpha '(90 . 90))
(add-to-list 'default-frame-alist '(alpha . (90 . 90)))
(set-frame-parameter (selected-frame) 'fullscreen 'maximized)
(add-to-list 'default-frame-alist '(fullscreen . maximized))

;; Set up the visible bell
(setq visible-bell nil
      ring-bell-function 'double-flash-mode-line)
(defun double-flash-mode-line ()
  (let ((flash-sec (/ 1.0 20)))
    (invert-face 'mode-line)
    (run-with-timer flash-sec nil #'invert-face 'mode-line)
    (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
    (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))
    
(column-number-mode)
(global-display-line-numbers-mode t)

;; Disable line numbers for some modes
(dolist (mode '(org-mode-hook
                term-mode-hook
                shell-mode-hook
                eshell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration
#+begin_src emacs-lisp
(when (equal system-name "Kavins-Air.Dlink")
    (set-face-attribute 'default nil :font "MesloLGS NF" :height runemacs/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "MesloLGS NF" :height 140)
)
(when (equal system-name "kavin-pc")
    (set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)
    (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 140)
)
(set-face-attribute 'variable-pitch nil :family "Cantarell" :height 160 :weight 'regular)
#+end_src

* Keybinding Configuration
#+begin_src emacs-lisp

;; General Setup
(use-package general
  :config
  (general-create-definer rune/leader-keys
    :keymaps '(normal insert visual emacs)
    :prefix "SPC"
    :global-prefix "C-SPC")

  (rune/leader-keys
    "t"  '(:ignore t :which-key "toggles")
    "tt" '(counsel-load-theme :which-key "choose theme")))

(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-want-C-u-scroll t)
  (setq evil-want-C-i-jump nil)
  (setq evil-undo-system 'undo-redo)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
  
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
* UI Configuration
** Command Log Mode
#+begin_src emacs-lisp

(use-package command-log-mode)

#+end_src
** Ivy and Counsel
#+begin_src emacs-lisp
;; Ivu Configuration
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package all-the-icons)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 15)))

(use-package doom-themes
  :init (load-theme 'doom-dracula t))

(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))

(use-package counsel
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
	 ("C-M-j" . counsel-switch-buffer)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history)))


#+end_src
** Helpful Help Commands
#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
** Autopair Config
#+begin_src emacs-lisp
(use-package autopair)
(autopair-global-mode)
#+end_src
** Text Scaling
#+begin_src emacs-lisp

(use-package hydra)

(defhydra hydra-text-scale (:timeout 4)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(rune/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src
* Org Mode
** Basic Config
*** Setup
#+begin_src emacs-lisp
(defun efs/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))

(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode)
  :custom
  (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
*** Font Configuration
#+begin_src emacs-lisp
(defun efs/org-font-setup ()
  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  ;; Set faces for heading levels
  (dolist (face '((org-level-1 . 1.2)
                  (org-level-2 . 1.1)
                  (org-level-3 . 1.05)
                  (org-level-4 . 1.0)
                  (org-level-5 . 1.1)
                  (org-level-6 . 1.1)
                  (org-level-7 . 1.1)
                  (org-level-8 . 1.1)))
    (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
*** Use Org
#+begin_src emacs-lisp
(use-package org
  :hook (org-mode . efs/org-mode-setup)
  :ensure org-plus-contrib
  :config
  (setq org-ellipsis " ▾")

  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)
  
  (setq org-agenda-files
	'("~/Documents/projects/emacs-from-scratch/Tasks.org"
	  "~/Documents/projects/emacs-from-scratch/Birthdays.org"))

  (setq org-refile-targets
    '(("Archive.org" :maxlevel . 1)
      ("Tasks.org" :maxlevel . 1)))

  (advice-add 'org-refile :after 'org-save-all-org-buffers)

  (setq org-todo-keywords
	'((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
	  (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (efs/org-font-setup))

#+end_src
*** Tag List
#+begin_src emacs-lisp
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)

       ("@school" . ?S)
       ("@home" . ?H)
       ("@tricycle" . ?T)
       ("@fiitjee" . ?F)
       ("planning" . ?p)
       ("study" . ?s)
       ("note" . ?n)
       ("idea" . ?i)))

#+end_src
*** Custom Commands 
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "TODO"
        ((org-agenda-overriding-header "TODO Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "TODO Tasks"
     ((todo "TODO"
        ((org-agenda-overriding-header "Todo Tasks")))))

    ("T" "Tricycle Tasks" tags-todo "+@tricycle")

    ("S" "School Tasks" tags-todo "+@school")

    ("s" "Study Planning" tags-todo "+study-planning")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

#+end_src
*** Capture Templates
#+begin_src emacs-lisp
(setq org-capture-templates
    `(("t" "Tasks / Projects")
      ("tt" "Task" entry (file+olp "~/Documents/projects/emacs-from-scratch/Tasks.org" "Inbox")
           "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

      ("j" "Journal Entries")
      ("jj" "Journal" entry
           (file+olp+datetree "~/Documents/projects/emacs-from-scratch/Journal.org")
           "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
           ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
           :clock-in :clock-resume
           :empty-lines 1)
      ("jm" "Meeting" entry
           (file+olp+datetree "~/Documents/projects/emacs-from-scratch/Journal.org")
           "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
           :clock-in :clock-resume
           :empty-lines 1)

      ("w" "Workflows")
      ("we" "Checking Email" entry (file+olp+datetree "~/Documents/projects/emacs-from-scratch/Journal.org")
           "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))

(define-key global-map (kbd "C-c j")
  (lambda () (interactive) (org-capture nil "jj")))


#+end_src
*** Org mode UI
#+begin_src emacs-lisp

(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

#+end_src
** Configure Babel Languages

#+begin_src emacs-lisp

(org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
        (python . t)))

(push '("conf-unix" . counf-unix) org-src-lang-modes)

#+end_src

** Org Special Block
#+begin_src emacs-lisp
(use-package org-special-block-extras
  :ensure t
  :hook (org-mode . org-special-block-extras-mode))
#+end_src
** Table of Contents
#+begin_src emacs-lisp
(use-package org-make-toc
  :hook (org-mode . org-make-toc-mode))
#+end_src
** Create Template
#+begin_src emacs-lisp

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("sh" . "src shell"))
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
(add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp

(defun efs/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
                           (expand-file-name "~/.emacs.d/Emacs.org"))
        (let ((org-confirm-babel-evaluate nil))
           (org-babel-tangle))))

(add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Org-wild-notifier-check
#+begin_src emacs-lisp

(use-package org-alert
  :ensure t
   :custom (alert-default-style 'osx-notifier)
   :config
   (setq org-alert-interval 300
         org-alert-notification-title "Reminder!")
   (org-alert-enable))

#+end_src
* Utilities
** Counsel OSX App
#+begin_src emacs-lisp
(use-package counsel-osx-app
  :bind* ("S-M-SPC" . counsel-osx-app)
  :commands counsel-osx-app
  :config
  (setq counsel-osx-app-location
        (list "/Applications"
              "/Applications/Misc"
              "/Applications/Utilities"
              (expand-file-name "~/Applications")
              (expand-file-name "~/.nix-profile/Applications")
              "/Applications/Xcode.app/Contents/Applications")))
#+end_src
** Elcord (Discord)
For showing =Playing Emacs= inside Discord 
#+begin_src emacs-lisp
(use-package elcord
  :ensure t
  :custom
  (elcord-display-buffer-details nil)
  :config
  (elcord-mode))
#+end_src
* Development
** Projectile
#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Documents/projects")
    (setq projectile-project-search-path '("~/Documents/projects")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))

#+end_src
** Magit
Befor using Forge, remember to do the following
- Go to [[https://github.com][Github]]
- Create a personal access token in [[https://github.com/settings/tokens][Personal Access Tokens tab]]
- In your device run
#+begin_src sh
vi ~/.authinfo
#+end_src
- Add the following
#+begin_src
machine api.github.com login <you-username>^forge password <token-created>
#+end_src
*** Configuration
#+begin_src emacs-lisp

(use-package magit
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package evil-magit
     :after magit)

(setq auth-sources '("~/.authinfo"))

(use-package forge)

#+end_src
** Lorem Ipsum
#+begin_src emacs-lisp
      (use-package lorem-ipsum
        :ensure t
        :config
        (lorem-ipsum-use-default-bindings))
#+end_src
* Credential Management
- pass to manage all passwords locally
- ivy-pass to make managing passwords easier in Emacs
- auth-source-pass to store passwords in one place
#+begin_src emacs-lisp
(use-package ivy-pass
  :commands ivy-pass
  :config
  (setq password-store-password-length 12))

(use-package auth-source-pass
  :config
  (auth-source-pass-enable))

(rune/leader-keys
  "ap" '(:ignore t :which-key "pass")
  "app" 'ivy-pass
  "api" 'password-store-insert
  "apg" 'password-store-generate)
#+end_src
* Applications
** Some App
#+begin_src conf-unix :tangle .config/some-app/config :noweb yes

value=<<the-value()>>

#+end_src

#+NAME: the-value
#+begin_src emacs-lisp
(+ 50 100)
#+end_src

Add =:noweb yes=!


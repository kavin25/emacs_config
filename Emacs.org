#+TITLE: Emacs Scratch Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#startup-performance][Startup Performance]]
- [[#system-settings][System Settings]]
- [[#package-system-setup][Package System Setup]]
- [[#autothemer][Autothemer]]
- [[#basic-ui-configuration][Basic UI Configuration]]
  - [[#setup][Setup]]
  - [[#font-configuration][Font Configuration]]
  - [[#icons][Icons]]
  - [[#modeline][Modeline]]
  - [[#theme][Theme]]
  - [[#rainbow-delimiter][Rainbow Delimiter]]
- [[#keybinding-configuration][Keybinding Configuration]]
  - [[#general][General]]
  - [[#lets-be-evil][Let's be Evil]]
- [[#editing-configuration][Editing Configuration]]
  - [[#command-log-mode][Command Log Mode]]
  - [[#ivy-and-counsel][Ivy and Counsel]]
  - [[#counsel][Counsel]]
  - [[#which-key][Which-key]]
  - [[#helpful-help-commands][Helpful Help Commands]]
  - [[#productivity][Productivity]]
    - [[#autopair-config][Autopair Config]]
    - [[#emmet-mode][Emmet Mode]]
    - [[#yasnippet][Yasnippet]]
  - [[#commenting-lines][Commenting Lines]]
  - [[#text-scaling][Text Scaling]]
- [[#org-mode][Org Mode]]
  - [[#basic-config][Basic Config]]
    - [[#setup][Setup]]
    - [[#font-configuration][Font Configuration]]
    - [[#use-org][Use Org]]
    - [[#tag-list][Tag List]]
    - [[#custom-commands][Custom Commands]]
    - [[#capture-templates][Capture Templates]]
    - [[#org-mode-ui][Org mode UI]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#org-special-block][Org Special Block]]
  - [[#table-of-contents][Table of Contents]]
  - [[#create-template-snippers][Create Template Snippers]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#org-alert][Org-alert]]
- [[#utilities][Utilities]]
  - [[#counsel-osx-app][Counsel OSX App]]
  - [[#elcord-discord][Elcord (Discord)]]
  - [[#speed-type][Speed Type]]
- [[#development][Development]]
  - [[#languages][Languages]]
    - [[#language-server][Language Server]]
      - [[#basic-setup][Basic Setup]]
      - [[#lsp-ui][LSP UI]]
      - [[#lsp-ivy][LSP IVY]]
      - [[#lsp-treemacs][LSP Treemacs]]
    - [[#programming-languages][Programming Languages]]
      - [[#typescript][TypeScript]]
      - [[#javascript][JavaScript]]
      - [[#html][HTML]]
      - [[#css][CSS]]
      - [[#scss][SCSS]]
      - [[#python][Python]]
  - [[#company-mode][Company Mode]]
  - [[#projectile][Projectile]]
  - [[#magit][Magit]]
    - [[#configuration][Configuration]]
  - [[#lorem-ipsum][Lorem Ipsum]]
- [[#credential-management][Credential Management]]
- [[#calendar-sync][Calendar Sync]]
- [[#music][Music]]
  - [[#spotify][Spotify]]
- [[#youtube][Youtube]]
- [[#cricket][Cricket]]
- [[#applications][Applications]]
  - [[#some-app][Some App]]
:END:
* Startup Performance
Taken from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance][David Wilson's emacs configuration]]
#+begin_src emacs-lisp
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src
* System Settings
#+begin_src emacs-lisp

  (setq rune/is-termux
        (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a"))))

#+end_src
* Package System Setup
- Using MELPA, ELPA, and Org package repositories
- =use-package= setup
#+begin_src emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
      (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

    (use-package exec-path-from-shell
      :init
      (exec-path-from-shell-initialize))

#+end_src
* Autothemer
#+begin_src emacs-lisp

  (use-package autothemer
    :ensure t)

#+end_src
* Basic UI Configuration
** Setup

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (unless rune/is-termux
    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10))        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  (setq initial-scratch-message "; Hi Kavin. C-x C-f eh" ) ; Message on Scratch Buffer

  ;; Configure Transparency in Emacs Window
  (unless rune/is-termux
  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  ;; Configure Emacs Window to be fullscreen
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))

  ;; Set up the visible bell
  (when (equal system-name "Kavins-Air.Dlink")
    (setq visible-bell nil
          ring-bell-function 'double-flash-mode-line)
    (defun double-flash-mode-line ()
      (let ((flash-sec (/ 1.0 20)))
        (invert-face 'mode-line)
          (run-with-timer flash-sec nil #'invert-face 'mode-line)
          (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
          (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line))))

  (when (equal system-name "kavin-pc")
    (setq visible-bell t))

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration
#+begin_src emacs-lisp

  (defvar runemacs/default-font-size 135)

  (when (equal system-name "Kavins-Air.Dlink")
      (set-face-attribute 'default nil :font "MesloLGS NF" :height runemacs/default-font-size)
      (set-face-attribute 'fixed-pitch nil :font "MesloLGS NF" :height 140)
  )
  (when (equal system-name "kavin-pc")
      (set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)
      (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 140)
  )
  (set-face-attribute 'variable-pitch nil :family "Cantarell" :height 160 :weight 'regular)

#+end_src

** Icons
#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src
** Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))

#+end_src
** Theme
#+begin_src emacs-lisp

  (use-package doom-themes :defer t)
  (load-theme 'doom-dracula t)

#+end_src
** Rainbow Delimiter
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
* Keybinding Configuration
** General
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src
** Let's be Evil
#+begin_src emacs-lisp
  (defun dw/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (unless rune/is-termux                                       
      (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
      (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
      (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
      (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro))

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
* Editing Configuration
** Command Log Mode
#+begin_src emacs-lisp

  (use-package command-log-mode)

#+end_src
** Ivy and Counsel
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src
** Counsel
#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src
** Which-key
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src
** Helpful Help Commands
#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
** Productivity
*** Autopair Config
#+begin_src emacs-lisp

  (use-package autopair)
  (autopair-global-mode)

#+end_src
*** Emmet Mode
#+begin_src emacs-lisp

  (use-package emmet-mode
    :diminish (emmet-mode . "ε")
    :bind* (("C-)" . emmet-next-edit-point)
            ("C-(" . emmet-prev-edit-point)
            ("M-<tab>" . emmet-expand-line))
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :init
    (setq emmet-indentation 2)
    (setq emmet-move-cursor-between-quotes t)
    :config
    ;; Auto-start on any markup modes
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (setq emmet-expand-jsx-className? t)
    (setq emmet-self-closing-tag-style " /"))

#+end_src
*** Yasnippet
#+begin_src emacs-lisp

  (use-package yasnippet
    :init
    (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode))

  (provide 'init-yasnippet)

#+end_src
** Commenting Lines
#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
    :bind ("s-/" . evilnc-comment-or-uncomment-lines))

#+end_src
** Text Scaling
#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "h" '(:ignore t :which-key "Hydra")
    "hs" '(hydra-text-scale/body :which-key "Scale Text"))

#+end_src
* Org Mode
** Basic Config
*** Setup
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org-bullets
    ;; :if (not rune/is-termux) 
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
*** Font Configuration
#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
*** Use Org
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :ensure org-plus-contrib
    :config
    (setq org-ellipsis " ▾")

    (setq org-directory
          (if rune/is-termux
              "~/storage/shared/Notes"
            "~/Notes"))

    ;; (setq org-src-fontify-natively t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Notes/Tasks.org"
            "~/Notes/Birthdays.org"
            "~/Notes/Calendar.org"))

    (setq org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (efs/org-font-setup))

#+end_src
*** Tag List
#+begin_src emacs-lisp
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)

       ("@school" . ?S)
       ("@home" . ?H)
       ("@tricycle" . ?T)
       ("@fiitjee" . ?F)
       ("planning" . ?p)
       ("study" . ?s)
       ("note" . ?n)
       ("idea" . ?i)))

#+end_src
*** Custom Commands 
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "TODO"
        ((org-agenda-overriding-header "TODO Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "TODO Tasks"
     ((todo "TODO"
        ((org-agenda-overriding-header "Todo Tasks")))))

    ("T" "Tricycle Tasks" tags-todo "+@tricycle")

    ("S" "School Tasks" tags-todo "+@school")

    ("s" "Study Planning" tags-todo "+study-planning")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

#+end_src
*** Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Notes/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Notes/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Notes/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Notes/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))


#+end_src
*** Org mode UI
#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))(defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

#+end_src
** Configure Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
      'org-babel-load-languages
      '((emacs-lisp . t)
          (python . t)
          (js . t)))

  (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Org Special Block
#+begin_src emacs-lisp
  (use-package org-special-block-extras
    :ensure t
    :hook (org-mode . org-special-block-extras-mode))
#+end_src
** Table of Contents
#+begin_src emacs-lisp
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src
** Create Template Snippers
#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("temp" . "src"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))

#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config ()
         ;; (when (string-equal (buffer-file-name)
                             ;; (expand-file-name "~/.emacs.d/Emacs.org"))
          (let ((org-confirm-babel-evaluate nil))
             (org-babel-tangle)))
  
  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Org-alert
#+begin_src emacs-lisp

  (use-package org-alert
    :ensure t
     :custom (alert-default-style 'osx-notifier)
     :config
     (setq org-alert-interval 300
           org-alert-notification-title "Reminder!")
     (org-alert-enable))

#+end_src
* Utilities
** Counsel OSX App
#+begin_src emacs-lisp
  (use-package counsel-osx-app
    :bind* ("S-M-SPC" . counsel-osx-app)
    :commands counsel-osx-app
    :config
    (setq counsel-osx-app-location
          (list "/Applications"
                "/Applications/Misc"
                "/Applications/Utilities"
                (expand-file-name "~/Applications")
                (expand-file-name "~/.nix-profile/Applications")
                "/Applications/Xcode.app/Contents/Applications")))

#+end_src
** Elcord (Discord)
For showing =Playing Emacs= inside Discord 
#+begin_src emacs-lisp
  (use-package elcord
    :ensure t
    :disabled rune/is-termuxk
    :custom
    (elcord-display-buffer-details nil)
    :config
    (elcord-mode))
#+end_src
** Speed Type
#+begin_src emacs-lisp

  (use-package speed-type
    :ensure t)

#+end_src
* Development
** Languages
*** Language Server
**** Basic Setup
#+begin_src emacs-lisp

  (defun rune/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)
    (lsp))

  (use-package lsp-mode
    :ensure t
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :commands (lsp lsp-deffered)
    :hook (lsp-mode . rune/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c s-p")
    :config
    (lsp-enable-which-key-integration t))

#+end_src
**** LSP UI
#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src
**** LSP IVY
#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src
**** LSP Treemacs
#+begin_src emacs-lisp
    (use-package lsp-treemacs
      :init (treemacs-display-current-project-exclusively)
      :after lsp)

  (rune/leader-keys
    "t" '(:ignore t :which-key "Treemacs")
    "tt" 'treemacs-display-current-project-exclusively)

#+end_src
*** Programming Languages
**** TypeScript
#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

**** JavaScript
#+begin_src emacs-lisp
  (defun rune/set-js-indentation ()
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.js\\'"
    :hook (js2-mode . lsp-deferred)
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil)

    ;; Set up proper indentation in JavaScript and JSON files
    (add-hook 'js2-mode-hook #'rune/set-js-indentation)
    (add-hook 'json-mode-hook #'rune/set-js-indentation))

  (use-package prettier-js
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors nil))
#+end_src

**** HTML
#+begin_src emacs-lisp
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|js[x]?\\)\\'"
    :hook (web-mode . lsp-deferred)
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (use-package impatient-mode
    :ensure t)

  (use-package skewer-mode
    :ensure t)
#+end_src
**** CSS
#+begin_src emacs-lisp

  (use-package css-mode
    :mode "\\.css\\'"
    :hook (css-mode . lsp-deferred)
    :config
    (setq css-indent-offset 2))

#+end_src
**** SCSS
#+begin_src emacs-lisp

        (use-package scss-mode
          :mode "\\.scss\\'"
          :hook (scss-mode . lsp-deferred)
          :config
          (setq scss-output-directory "../css")
          (setq scss-compile-at-save t))

#+end_src
**** Python
#+begin_src emacs-lisp
(use-package lsp-python-ms
  :ensure t
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp-deferred))))
#+end_src
** Company Mode
#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :diminish
    :functions (all-the-icons-faicon
                all-the-icons-material
                all-the-icons-octicon
                all-the-icons-alltheicon)
    :hook (company-mode . company-box-mode)
    :init (setq company-box-enable-icon (display-graphic-p))
    :config
    (setq company-box-backends-colors nil))
#+end_src
** Projectile
#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/Documents/projects")
      (setq projectile-project-search-path '("~/Documents/projects")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

#+end_src
** Magit
Befor using Forge, remember to do the following
- Go to [[https://github.com][Github]]
- Create a personal access token in [[https://github.com/settings/tokens][Personal Access Tokens tab]]
  - Grant Access to:
    - =repo= grants full read/write access to private and public repositories.
    - =user= grants access to profile information.
    - =read:org= grants read-only access to organization membership.
- In your device run
#+begin_src sh
  vi ~/.authinfo
#+end_src
- Add the following
#+begin_src
machine api.github.com login <you-username>^forge password <token-created>
#+end_src
*** Configuration
#+begin_src emacs-lisp

(use-package magit
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package evil-magit
     :after magit)

(setq auth-sources '("~/.authinfo"))

(use-package forge)

#+end_src
** Lorem Ipsum
#+begin_src emacs-lisp
  (use-package lorem-ipsum
    :ensure t
    :config
    (lorem-ipsum-use-default-bindings))
#+end_src
* Credential Management
- pass to manage all passwords locally
- ivy-pass to make managing passwords easier in Emacs
- auth-source-pass to store passwords in one place
#+begin_src emacs-lisp
  (use-package ivy-pass
    :commands ivy-pass
    :config
    (setq password-store-password-length 12)
    (setq epa-file-cache-passphrase-for-symmetric-encryption nil))

  (use-package auth-source-pass
    :config
    (auth-source-pass-enable))

  (rune/leader-keys
    "p" '(:ignore t :which-key "pass")
    "pp" 'ivy-pass
    "pi" 'password-store-insert
    "pg" 'password-store-generate)
#+end_src
* Calendar Sync
#+begin_src emacs-lisp
  (use-package org-gcal
       :after org
       :config

       (setq org-gcal-client-id (password-store-get "API/Google/kavinvalli-emacs-id")
             org-gcal-client-secret (password-store-get "API/Google/kavinvalli-emacs-secret")
             org-gcal-file-alist '(("kavinvalli@gmail.com" . "~/Notes/Calendar.org"))))

  (rune/leader-keys
    "c" '(:ignore t :which-key "calendar")
    "cs" '(org-gcal-fetch :which-key "sync")
    "cp" '(org-gcal-post-at-point :which-key "post"))

#+end_src
* Music
** Spotify
#+begin_src emacs-lisp
  (use-package counsel-spotify
      :after ivy
      :config
      (setq counsel-spotify-client-id (password-store-get "API/Spotify/kavinvalli-emacs-id"))
      (setq counsel-spotify-client-secret (password-store-get "API/Spotify/kavinvalli-emacs-secret")))

      (rune/leader-keys
        "s" '(:ignore t :which-key "Counsel Spotify")
        "ss" '(:ignore t :which-key "Search")
			  "ssp" '(counsel-spotify-search-playlist :which-key "Search Playlist")
        "sst" '(counsel-spotify-search-track :which-key "Search Track")
        "sp" '(counsel-spotify-toggle-play-pause :which-key "Toggle Play Pause")
        "sa" '(counsel-spotify-search-album :which-key "Search Album")
        "s>" '(counsel-spotify-next :which-key "Next")
        "s<" '(counsel-spotify-previous :which-key "Previous"))

  ;; (use-package spotify
  ;;   :config
  ;;   (setq spotify-transport 'connect)
  ;;   (setq spotify-oauth2-client-id (password-store-get "API/Spotify/kavinvalli-emacs-id"))
  ;;   (setq spotify-oauth2-client-secret (password-store-get "API/Spotify/kavinvalli-emacs-secret"))
  ;;   (define-key spotify-mode-map (kbd "C-c .") 'spotify-command-map))

#+end_src
* Youtube
#+begin_src emacs-lisp
      (use-package ivy-youtube
        :config
        (setq ivy-youtube-key (password-store-get "API/Youtube/kavinvalli-emacs-api-key")))
    (rune/leader-keys
      "y" '(ivy-youtube :which-key "Ivy Youtube"))
#+end_src
* Cricket
#+begin_src emacs-lisp
  (use-package cricbuzz)
#+end_src
* Applications
** Some App
#+begin_src conf-unix :tangle .config/some-app/config :noweb yes

  value=<<the-value()>>

#+end_src

#+NAME: the-value
#+begin_src emacs-lisp
(+ 50 100)
#+end_src

Add =:noweb yes=!

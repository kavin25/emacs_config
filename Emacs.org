#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+TITLE: Emacs Scratch Configuration
* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#startup-performance][Startup Performance]]
- [[#emacs-dashboard][Emacs Dashboard]]
- [[#system-settings][System Settings]]
- [[#package-system-setup][Package System Setup]]
- [[#autothemer][Autothemer]]
- [[#basic-ui-configuration][Basic UI Configuration]]
  - [[#setup][Setup]]
    - [[#basic-configuration][Basic Configuration]]
    - [[#emacs-window][Emacs Window]]
    - [[#bell][Bell]]
    - [[#column-number][Column number]]
  - [[#font-configuration][Font Configuration]]
  - [[#icons][Icons]]
  - [[#modeline][Modeline]]
  - [[#theme][Theme]]
  - [[#rainbow-delimiter][Rainbow Delimiter]]
- [[#keybinding-configuration][Keybinding Configuration]]
  - [[#general][General]]
  - [[#lets-be-evil][Let's be Evil]]
    - [[#evil][Evil]]
    - [[#evil-collection][Evil Collection]]
  - [[#which-key][Which-key]]
- [[#editing-configuration][Editing Configuration]]
  - [[#command-log-mode][Command Log Mode]]
  - [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#helpful-help-commands][Helpful Help Commands]]
  - [[#productivity][Productivity]]
    - [[#autopair-config][Autopair Config]]
    - [[#emmet-mode][Emmet Mode]]
  - [[#text-scaling][Text Scaling]]
- [[#org-mode][Org Mode]]
  - [[#basic-config][Basic Config]]
    - [[#setup][Setup]]
    - [[#font-configuration][Font Configuration]]
    - [[#use-org][Use Org]]
    - [[#tag-list][Tag List]]
    - [[#custom-commands][Custom Commands]]
    - [[#capture-templates][Capture Templates]]
    - [[#org-mode-ui][Org mode UI]]
  - [[#configure-babel-languages][Configure Babel Languages]]
  - [[#org-special-block][Org Special Block]]
  - [[#table-of-contents][Table of Contents]]
  - [[#create-template-snippets][Create Template Snippets]]
  - [[#auto-tangle-configuration-files][Auto-tangle Configuration Files]]
  - [[#org-alert][Org-alert]]
- [[#utilities][Utilities]]
  - [[#counsel-osx-app][Counsel OSX App]]
  - [[#elcord-discord][Elcord (Discord)]]
  - [[#speed-type][Speed Type]]
  - [[#bluetooth][Bluetooth]]
- [[#development][Development]]
  - [[#languages][Languages]]
    - [[#language-server][Language Server]]
      - [[#basic-setup][Basic Setup]]
      - [[#lsp-ui][LSP UI]]
      - [[#lsp-ivy][LSP IVY]]
      - [[#lsp-treemacs][LSP Treemacs]]
    - [[#dap-mode][DAP Mode]]
    - [[#programming-languages][Programming Languages]]
      - [[#typescript][TypeScript]]
      - [[#javascript][JavaScript]]
      - [[#html][HTML]]
      - [[#css][CSS]]
      - [[#scss][SCSS]]
      - [[#python][Python]]
  - [[#magit][Magit]]
    - [[#configuration][Configuration]]
  - [[#lorem-ipsum][Lorem Ipsum]]
  - [[#commenting-lines][Commenting Lines]]
  - [[#keybindings][Keybindings]]
- [[#credential-management][Credential Management]]
- [[#calendar-sync][Calendar Sync]]
- [[#music][Music]]
  - [[#spotify][Spotify]]
- [[#terminal][Terminal]]
  - [[#term-mode][term-mode]]
  - [[#colors][colors]]
  - [[#vterm][vterm]]
- [[#buffer-management-with-bufler][Buffer management with Bufler]]
- [[#file-management][File Management]]
  - [[#dired][Dired]]
    - [[#key-bindings][Key Bindings]]
      - [[#navigation][Navigation]]
      - [[#marking-files][Marking files]]
      - [[#copying-and-renaming-files][Copying and Renaming files]]
      - [[#deleting-files][Deleting files]]
      - [[#creating-and-extracting-archives][Creating and extracting archives]]
      - [[#other-common-operations][Other common operations]]
    - [[#basic-config][Basic Config]]
    - [[#dired-single][Dired Single]]
    - [[#all-the-icons][All the Icons]]
    - [[#open-external-files][Open external files]]
    - [[#hideshow-dotfiles][Hide/Show dotfiles]]
    - [[#dired-rainbow][Dired Rainbow]]
- [[#window-management][Window Management]]
  - [[#exwm-configuration][EXWM Configuration]]
- [[#applications][Applications]]
  - [[#some-app][Some App]]
:END:
* Startup Performance
Taken from [[https://github.com/daviwil/dotfiles/blob/master/Emacs.org#startup-performance][David Wilson's emacs configuration]]
#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src
* Emacs Dashboard
#+begin_src emacs-lisp

  ;; (use-package dashboard
  ;;   :ensure t
  ;;   :config
  ;;   (dashboard-setup-startup-hook))

#+end_src
* System Settings
#+begin_src emacs-lisp

  (setq rune/is-termux
        (string-suffix-p "Android" (string-trim (shell-command-to-string "uname -a"))))

#+end_src
* Package System Setup
- Using MELPA, ELPA, and Org package repositories
- =use-package= setup
#+begin_src emacs-lisp

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

  (use-package exec-path-from-shell
    :init
    (exec-path-from-shell-initialize))

#+end_src
* Autothemer
Only needed when using custom theme
#+begin_src emacs-lisp

  (use-package autothemer
    :ensure t)

#+end_src
* Basic UI Configuration
** Setup
*** Basic Configuration
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (unless rune/is-termux
    (scroll-bar-mode -1)        ; Disable visible scrollbar
    (tool-bar-mode -1)          ; Disable the toolbar
    (tooltip-mode -1)           ; Disable tooltips
    (set-fringe-mode 10))        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar

  (setq initial-scratch-message "; Hi Kavin. C-x C-f eh" ) ; Message on Scratch Buffer


#+end_src
*** Emacs Window 
#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))


#+end_src
*** Bell
#+begin_src emacs-lisp

  ;; Set up the visible bell
  (when (equal system-name "Kavins-Air.Dlink")
    (setq visible-bell nil
          ring-bell-function 'double-flash-mode-line)
    (defun double-flash-mode-line ()
      (let ((flash-sec (/ 1.0 20)))
        (invert-face 'mode-line)
        (run-with-timer flash-sec nil #'invert-face 'mode-line)
        (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
        (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line))))

  (when (equal system-name "kavin-pc")
    (setq visible-bell t))


#+end_src
*** Column number
#+begin_src emacs-lisp

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  vterm-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration
#+begin_src emacs-lisp

  (defvar runemacs/default-font-size 135)

  (when (equal system-name "Kavins-Air.Dlink")
      (set-face-attribute 'default nil :font "MesloLGS NF" :height runemacs/default-font-size)
      (set-face-attribute 'fixed-pitch nil :font "MesloLGS NF" :height 140)
  )
  (when (equal system-name "kavin-pc")
      (set-face-attribute 'default nil :font "Fira Code Retina" :height runemacs/default-font-size)
      (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 140)
  )
  (set-face-attribute 'variable-pitch nil :family "Cantarell" :height 160 :weight 'regular)

#+end_src

** Icons
#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src
** Modeline
#+begin_src emacs-lisp

  (use-package doom-modeline
    :hook (after-init . doom-modeline-init)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-irc nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

#+end_src
** Theme
#+begin_src emacs-lisp

  (use-package doom-themes :defer t)
  ;; (use-package spacemacs-theme :defer t)
  ;; (load-theme 'doom-dracula t)
  ;; (load-theme 'spacemacs-dark t)
  ;; (load-theme 'doom-palenight t)
  (load-theme 'doom-horizon t)
  ;; (load-theme 'doom-acario-dark t)

#+end_src
** Rainbow Delimiter
#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src
* Keybinding Configuration
** General
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer rune/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src
** Let's be Evil
*** Evil
#+begin_src emacs-lisp
  (defun dw/dont-arrow-me-bro ()
    (interactive)
    (message "Arrow keys are bad, you know?"))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-undo-system 'undo-redo)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (unless rune/is-termux                                       
      (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
      (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
      (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
      (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
      (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro))

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))


#+end_src
*** Evil Collection
#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src
** Which-key
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src
* Editing Configuration
** Command Log Mode
#+begin_src emacs-lisp

  (use-package command-log-mode)

#+end_src
** Ivy 
#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

#+end_src
** Counsel
#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

#+end_src
** Helpful Help Commands
#+begin_src emacs-lisp

(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src
** Productivity
*** Autopair Config
#+begin_src emacs-lisp

  (use-package autopair)
  (autopair-global-mode)

#+end_src
*** Emmet Mode
#+begin_src emacs-lisp

  (use-package emmet-mode
    :mode "\\.edge\\'"
    :diminish (emmet-mode . "ε")
    :bind* (("C-)" . emmet-next-edit-point)
            ("C-(" . emmet-prev-edit-point)
            ("M-<tab>" . emmet-expand-line))
    :commands (emmet-mode
               emmet-next-edit-point
               emmet-prev-edit-point)
    :init
    (setq emmet-indentation 2)
    (setq emmet-move-cursor-between-quotes t)
    :config
    ;; Auto-start on any markup modes
    (add-hook 'sgml-mode-hook 'emmet-mode)
    (add-hook 'web-mode-hook 'emmet-mode)
    (setq emmet-expand-jsx-className? nil)  ;; Set to nil because className was being used in non-jsx files too
    (setq emmet-self-closing-tag-style " /"))

#+end_src
** Text Scaling
#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (rune/leader-keys
    "h" '(:ignore t :which-key "Hydra")
    "hs" '(hydra-text-scale/body :which-key "Scale Text"))

#+end_src
* Org Mode
** Basic Config
*** Setup
#+begin_src emacs-lisp
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org-bullets
    ;; :if (not rune/is-termux) 
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src
*** Font Configuration
#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src
*** Use Org
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . efs/org-mode-setup)
    :ensure org-plus-contrib
    :config
    (setq org-ellipsis " ▾")

    (setq org-src-fontify-natively t)

    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)

    (setq org-agenda-files
          '("~/Notes/Tasks.org"
            "~/Notes/Birthdays.org"
            "~/Notes/Calendar.org"))

    (setq
     org-refile-targets
      '(("Archive.org" :maxlevel . 1)
        ("Tasks.org" :maxlevel . 1)))

    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

    (efs/org-font-setup))

#+end_src
*** Tag List
#+begin_src emacs-lisp
  (setq org-tag-alist
    '((:startgroup)
       ; Put mutually exclusive tags here
       (:endgroup)

       ("@school" . ?S)
       ("@home" . ?H)
       ("@tricycle" . ?T)
       ("@fiitjee" . ?F)
       ("planning" . ?p)
       ("study" . ?s)
       ("note" . ?n)
       ("idea" . ?i)))

#+end_src
*** Custom Commands 
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
   '(("d" "Dashboard"
     ((agenda "" ((org-deadline-warning-days 7)))
      (todo "TODO"
        ((org-agenda-overriding-header "TODO Tasks")))
      (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

    ("n" "TODO Tasks"
     ((todo "TODO"
        ((org-agenda-overriding-header "Todo Tasks")))))

    ("T" "Tricycle Tasks" tags-todo "+@tricycle")

    ("S" "School Tasks" tags-todo "+@school")

    ("s" "Study Planning" tags-todo "+study-planning")

    ;; Low-effort next actions
    ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
     ((org-agenda-overriding-header "Low Effort Tasks")
      (org-agenda-max-todos 20)
      (org-agenda-files org-agenda-files)))

    ("w" "Workflow Status"
     ((todo "WAIT"
            ((org-agenda-overriding-header "Waiting on External")
             (org-agenda-files org-agenda-files)))
      (todo "REVIEW"
            ((org-agenda-overriding-header "In Review")
             (org-agenda-files org-agenda-files)))
      (todo "PLAN"
            ((org-agenda-overriding-header "In Planning")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "BACKLOG"
            ((org-agenda-overriding-header "Project Backlog")
             (org-agenda-todo-list-sublevels nil)
             (org-agenda-files org-agenda-files)))
      (todo "READY"
            ((org-agenda-overriding-header "Ready for Work")
             (org-agenda-files org-agenda-files)))
      (todo "ACTIVE"
            ((org-agenda-overriding-header "Active Projects")
             (org-agenda-files org-agenda-files)))
      (todo "COMPLETED"
            ((org-agenda-overriding-header "Completed Projects")
             (org-agenda-files org-agenda-files)))
      (todo "CANC"
            ((org-agenda-overriding-header "Cancelled Projects")
             (org-agenda-files org-agenda-files)))))))

#+end_src
*** Capture Templates
#+begin_src emacs-lisp
  (setq org-capture-templates
      `(("t" "Tasks / Projects")
        ("tt" "Task" entry (file+olp "~/Notes/Tasks.org" "Inbox")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Journal Entries")
        ("jj" "Journal" entry
             (file+olp+datetree "~/Notes/Journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Meeting" entry
             (file+olp+datetree "~/Notes/Journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Workflows")
        ("we" "Checking Email" entry (file+olp+datetree "~/Notes/Journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)))

  (define-key global-map (kbd "C-c j")
    (lambda () (interactive) (org-capture nil "jj")))


#+end_src
*** Org mode UI
#+begin_src emacs-lisp

  (defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . efs/org-mode-visual-fill))(defun efs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

#+end_src
** Configure Babel Languages

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)
     (js . t)
     (sql . t)
     (lua . t)))

   (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

** Org Special Block
#+begin_src emacs-lisp
  (use-package org-special-block-extras
    :ensure t
    :hook (org-mode . org-special-block-extras-mode))
#+end_src
** Table of Contents
#+begin_src emacs-lisp
  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))
#+end_src
** Create Template Snippets
#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("temp" . "src"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("js" . "src js"))
  (add-to-list 'org-structure-template-alist '("html" . "src html"))
  (add-to-list 'org-structure-template-alist '("sql" . "src sql"))
  (add-to-list 'org-structure-template-alist '("rust" . "src rust"))
  (add-to-list 'org-structure-template-alist '("lua" . "src lua"))
  (add-to-list 'org-structure-template-alist '("dart" . "src dart"))

#+end_src
** Auto-tangle Configuration Files
#+begin_src emacs-lisp

  (defun efs/org-babel-tangle-config ()
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Org-alert
#+begin_src emacs-lisp

  (use-package org-alert
    :ensure t
     :custom (alert-default-style 'osx-notifier)
     :config
     (setq org-alert-interval 300
           org-alert-notification-title "Reminder!")
     (org-alert-enable))

#+end_src
* Utilities
** Counsel OSX App
#+begin_src emacs-lisp
  (use-package counsel-osx-app
    :bind* ("S-M-SPC" . counsel-osx-app)
    :commands counsel-osx-app
    :config
    (setq counsel-osx-app-location
          (list "/Applications"
                "/Applications/Misc"
                "/Applications/Utilities"
                (expand-file-name "~/Applications")
                (expand-file-name "~/.nix-profile/Applications")
                "/Applications/Xcode.app/Contents/Applications")))

#+end_src
** Elcord (Discord)
For showing =Playing Emacs= inside Discord 
#+begin_src emacs-lisp

  (use-package elcord
    :ensure t
    :disabled rune/is-termuxk
    :custom
    (elcord-display-buffer-details nil)
    :config
    (elcord-mode))

#+end_src
** Speed Type
#+begin_src emacs-lisp

  (use-package speed-type
    :ensure t)

#+end_src
** Bluetooth
#+begin_src emacs-lisp

  (defun rune/bluetooth-connect-philips ()
    (interactive)
    (start-process-shell-command "blueutil" nil "blueutil --connect a4-77-58-7a-2d-7d"))


  (rune/leader-keys
    "b" '(:ignore t :which-key "Bluetooth")
    "bc" '(:ignore t :which-key "connect")
    "bcp" '(rune/bluetooth-connect-philips :which-key "Philips SHB3075"))

#+end_src
* Development
** Languages
*** Language Server
**** Basic Setup
#+begin_src emacs-lisp

  (defun rune/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode)
     (lsp))

   (use-package lsp-mode
     :ensure t
     :bind (:map lsp-mode-map
                 ("TAB" . completion-at-point))
     :commands (lsp lsp-deffered)
     :hook (lsp-mode . rune/lsp-mode-setup)
     :init
     (setq lsp-keymap-prefix "C-c s-p")
     :config
     (lsp-enable-which-key-integration t))

 #+end_src
**** LSP UI
#+begin_src emacs-lisp

   (use-package lsp-ui
     :hook (lsp-mode . lsp-ui-mode)
     :custom
     (lsp-ui-doc-position 'bottom))

#+end_src
**** LSP IVY
#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src
**** LSP Treemacs
#+begin_src emacs-lisp
    (use-package lsp-treemacs
      :init (treemacs-display-current-project-exclusively)
      :after lsp)

  (rune/leader-keys
    "t" '(:ignore t :which-key "Treemacs")
    "to" 'treemacs
    "tt" 'treemacs-display-current-project-exclusively)

#+end_src
*** DAP Mode
#+begin_src emacs-lisp

  (use-package dap-mode)

#+end_src
*** Programming Languages
**** TypeScript
#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))

#+end_src

**** JavaScript
#+begin_src emacs-lisp

  (defun rune/set-js-indentation ()
    (setq js-indent-level 2)
    (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.js\\'"
    :hook (js2-mode . lsp-deferred)
    :config
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))
    (setq js2-mode-show-strict-warnings nil)
    (add-hook 'js2-mode-hook #'rune/set-js-indentation)
    (add-hook 'json-mode-hook #'rune/set-js-indentation)
    (require 'dap-node)
    (dap-node-setup))

  (use-package prettier-js
    :hook ((js2-mode . prettier-js-mode)
           (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors nil))

#+end_src

**** HTML
#+begin_src emacs-lisp
  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|js[x]?\\|edge\\)\\'"
    :hook (web-mode . lsp-deferred)
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (use-package impatient-mode
    :ensure t)

  (use-package skewer-mode
    :ensure t)
#+end_src
**** CSS
#+begin_src emacs-lisp

  (use-package css-mode
    :mode "\\.css\\'"
    :hook (css-mode . lsp-deferred)
    :config
    (setq css-indent-offset 2))

#+end_src
**** SCSS
#+begin_src emacs-lisp

        (use-package scss-mode
          :mode "\\.scss\\'"
          :hook (scss-mode . lsp-deferred)
          :config
          (setq scss-output-directory "../css")
          (setq scss-compile-at-save t))

#+end_src
**** Python
#+begin_src emacs-lisp
  (use-package lsp-python-ms
    :ensure t
    :init (setq lsp-python-ms-auto-install-server t)
    :hook (python-mode . (lambda ()
                           (require 'lsp-python-ms)
                            (lsp-deferred))))
#+end_src
** Magit
Befor using Forge, remember to do the following
- Go to [[https://github.com][Github]]
- Create a personal access token in [[https://github.com/settings/tokens][Personal Access Tokens tab]]
  - Grant Access to:
    - =repo= grants full read/write access to private and public repositories.
    - =user= grants access to profile information.
    - =read:org= grants read-only access to organization membership.
- In your device run
#+begin_src sh
  vi ~/.authinfo
#+end_src
- Add the following
#+begin_src
machine api.github.com login <you-username>^forge password <token-created>
#+end_src
*** Configuration
#+begin_src emacs-lisp

(use-package magit
     :custom
     (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

(use-package evil-magit
     :after magit)

(setq auth-sources '("~/.authinfo"))

  (when (equal system-name "Kavins-Air.Dlink")
 (use-package forge))

#+end_src
** Lorem Ipsum
 #+begin_src emacs-lisp
   (use-package lorem-ipsum
     :ensure t
     :config
     (lorem-ipsum-use-default-bindings))
 #+end_src
** Commenting Lines
#+begin_src emacs-lisp

   (use-package evil-nerd-commenter
     :bind ("s-/" . evilnc-comment-or-uncomment-lines))

   (use-package comment-tags
     :init
 	  (autoload 'comment-tags-mode "comment-tags-mode")
     (setq comment-tags-keyword-faces
           `(("TODO" . ,(list :weight 'bold :foreground "#28ABE3"))
             ("BUG" . ,(list :weight 'bold :foreground "#DB3340"))
             ("INFO" . ,(list :weight 'bold :foreground "#F7EAC8"))
             ("DONE" . ,(list :weight 'bold :foreground "#1FDA9A"))))
     (setq comment-tags-keymap-prefix (kbd "C-c t"))
     (setq comment-tags-comment-start-only t
           comment-tags-require-colon t
           comment-tags-case-sensitive t
           comment-tags-show-faces t
           comment-tags-lighter nil)
     :config
     (add-hook 'prog-mode-hook 'comment-tags-mode))


 #+end_src
** Keybindings
 #+begin_src emacs-lisp

   (rune/leader-keys
     "r" '(:ignore t :which-key "Rename")
     "rf" 'rename-file)

#+end_src
* Credential Management
- pass to manage all passwords locally
- ivy-pass to make managing passwords easier in Emacs
- auth-source-pass to store passwords in one place
#+begin_src emacs-lisp

  (when (equal system-name "Kavins-Air.Dlink")
  (use-package ivy-pass
    :commands ivy-pass
    :config
    (setq password-store-password-length 12)
    (setq epa-file-cache-passphrase-for-symmetric-encryption nil))

  (use-package auth-source-pass
    :config
    (auth-source-pass-enable))

  (rune/leader-keys
    "p" '(:ignore t :which-key "pass")
    "pp" 'ivy-pass
    "pi" 'password-store-insert
    "pg" 'password-store-generate))

#+end_src
* Calendar Sync
#+begin_src emacs-lisp
  ;; (use-package org-gcal
  ;;      :after org
  ;;      :config

  ;;      (setq org-gcal-client-id (password-store-get "API/Google/kavinvalli-emacs-id")
  ;;            org-gcal-client-secret (password-store-get "API/Google/kavinvalli-emacs-secret")
  ;;            org-gcal-file-alist '(("kavinvalli@gmail.com" . "~/Notes/Calendar.org"))))

  ;; (rune/leader-keys
  ;;   "c" '(:ignore t :which-key "calendar")
  ;;   "cs" '(org-gcal-fetch :which-key "sync")
  ;;   "cp" '(org-gcal-post-at-point :which-key "post"))

#+end_src
* Music
** Spotify
#+begin_src emacs-lisp

  (when (equal system-name "Kavins-Air.Dlink")
  (use-package counsel-spotify
    :after ivy
    :config
    (setq counsel-spotify-client-id (password-store-get "API/Spotify/kavinvalli-emacs-id"))
    (setq counsel-spotify-client-secret (password-store-get "API/Spotify/kavinvalli-emacs-secret")))

  (rune/leader-keys
    "s" '(:ignore t :which-key "Counsel Spotify")
    "ss" '(:ignore t :which-key "Search")
    "ssp" '(counsel-spotify-search-playlist :which-key "Search Playlist")
    "sst" '(counsel-spotify-search-track :which-key "Search Track")
        "sp" '(counsel-spotify-toggle-play-pause :which-key "Toggle Play Pause")
        "sa" '(counsel-spotify-search-album :which-key "Search Album")
        "s>" '(counsel-spotify-next :which-key "Next")
        "s<" '(counsel-spotify-previous :which-key "Previous")))

#+end_src
# * Youtube
#+begin_src emacs-lisp

  (when (equal system-name "Kavins-Air.Dlink")
  (use-package ivy-youtube
    :config
    (setq ivy-youtube-key (password-store-get "API/Youtube/kavinvalli-emacs-api-key")))

  (rune/leader-keys
    "y" '(ivy-youtube :which-key "Ivy Youtube")))

#+end_src
* Terminal
** term-mode
#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "bash")
    (setq term-prompt-regexp "^[^#$%>\\n]*[#$%>] *"))

#+end_src
** colors
#+begin_src emacs-lisp

  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))

#+end_src
** vterm
#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
    ;;(setq vterm-shell "zsh")                       ;; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

#+end_src
* Buffer management with Bufler
#+begin_src emacs-lisp

  (use-package bufler
    :ensure t
    :bind (("C-M-j" . bufler-switch-buffer)
           ("C-M-k" . bufler-workspace-frame-set))
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET")   'bufler-list-buffer-switch
      (kbd "M-RET") 'bufler-list-buffer-peek
      "D"           'bufler-list-buffer-kill)

    (setf bufler-groups
          (bufler-defgroups
            ;; Subgroup collecting all named workspaces.
            (group (auto-workspace))
            ;; Subgroup collecting buffers in a projectile project.
            (group (auto-projectile))
            ;; Grouping browser windows
            (group
             (group-or "Browsers"
                       (name-match "Vimb" (rx bos "vimb"))
                       (name-match "Qutebrowser" (rx bos "Qutebrowser"))
                       (name-match "Chromium" (rx bos "Chromium"))))
            (group
             (group-or "Chat"
                       (mode-match "Telega" (rx bos "telega-"))))
            (group
             ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
             (group-or "Help/Info"
                       (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                       ;; (mode-match "*Helpful*" (rx bos "helpful-"))
                       (mode-match "*Info*" (rx bos "info-"))))
            (group
             ;; Subgroup collecting all special buffers (i.e. ones that are not
             ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
             ;; through to other groups, so they end up grouped with their project buffers).
             (group-and "*Special*"
                        (name-match "**Special**"
                                    (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                        (lambda (buffer)
                          (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                               buffer)
                                      (funcall (mode-match "Dired" (rx bos "dired"))
                                               buffer)
                                      (funcall (auto-file) buffer))
                            "*Special*"))))
            ;; Group remaining buffers by major mode.
            (auto-mode))))

#+end_src
* File Management
** Dired
Dired is a built-in file manager for Emacs that does some pretty amazing things!  Here are some key bindings you should try out:

*** Key Bindings

**** Navigation

*Emacs* / *Evil*
- =n= / =j= - next line
- =p= / =k= - previous line
- =j= / =J= - jump to file in buffer
- =RET= - select file or directory
- =^= - go to parent directory
- =S-RET= / =g O= - Open file in "other" window
- =M-RET= - Show file in other window without focusing (previewing files)
- =g o= (=dired-view-file=) - Open file but in a "preview" mode, close with =q=
- =g= / =g r= Refresh the buffer with =revert-buffer= after changing configuration (and after filesystem changes!)

**** Marking files

- =m= - Marks a file
- =u= - Unmarks a file
- =U= - Unmarks all files in buffer
- =* t= / =t= - Inverts marked files in buffer
- =% m= - Mark files in buffer using regular expression
- =*= - Lots of other auto-marking functions
- =k= / =K= - "Kill" marked items (refresh buffer with =g= / =g r= to get them back)
- Many operations can be done on a single file if there are no active marks!
 
**** Copying and Renaming files

- =C= - Copy marked files (or if no files are marked, the current file)
- Copying single and multiple files
- =U= - Unmark all files in buffer
- =R= - Rename marked files, renaming multiple is a move!
- =% R= - Rename based on regular expression: =^test= , =old-\&=

*Power command*: =C-x C-q= (=dired-toggle-read-only=) - Makes all file names in the buffer editable directly to rename them!  Press =Z Z= to confirm renaming or =Z Q= to abort.

**** Deleting files

- =D= - Delete marked file
- =d= - Mark file for deletion
- =x= - Execute deletion for marks
- =delete-by-moving-to-trash= - Move to trash instead of deleting permanently

**** Creating and extracting archives

- =Z= - Compress or uncompress a file or folder to (=.tar.gz=)
- =c= - Compress selection to a specific file
- =dired-compress-files-alist= - Bind compression commands to file extension

**** Other common operations

- =T= - Touch (change timestamp)
- =M= - Change file mode
- =O= - Change file owner
- =G= - Change file group
- =S= - Create a symbolic link to this file
- =L= - Load an Emacs Lisp file into Emacs
*** Basic Config
#+begin_src emacs-lisp

  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first")
             (delete-by-moving-to-trash t))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

#+end_src
*** Dired Single
Helps keep down number of dired buffers to 1
#+begin_src emacs-lisp

  (use-package dired-single)

#+end_src
*** All the Icons
#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

#+end_src
*** Open external files
#+begin_src emacs-lisp

    (use-package dired-open
      :config
      (setq dired-open-extensions '(("png" . "open")
                                    ("jpg" . "open")
                                    ("jpeg" . "open")
                                    ("pdf" . "open")
                                    ("mov" . "open"))))

#+end_src
*** Hide/Show dotfiles
#+begin_src emacs-lisp

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "H" 'dired-hide-dotfiles-mode))

#+end_src
*** Dired Rainbow
#+begin_src emacs-lisp

  (use-package dired-rainbow
    :config
    (progn
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*")
      )) 

#+end_src
* Window Management
** EXWM Configuration
#+begin_src emacs-lisp

  (when (equal system-name "kavin-pc")
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (exwm-workspace-rename-buffer exwm-class-name)))

    (add-hook 'exwm-update-title-hook
              (lambda ()
                (pcase exwm-class-name
                  ("Vimb" (exwm-workspace-rename-buffer (format "vimb: %s" exwm-title)))
                  ("qutebrowser" (exwm-workspace-rename-buffer (format "Qutebrowser: %s" exwm-title))))))

    (defun rune/move-buffer-to-workspace ()
      (interactive)
      (pcase exwm-class-name
        ("qutebrowser" (exwm-workspace-move-window 1))
        ("discord" (exwm-workspace-move-window 2))))

    (add-hook 'exwm-manage-finish-hook
              (lambda ()
                ;; Send the window where it belongs
                (rune/move-buffer-to-workspace)))

    (use-package exwm
      :config
     (setq exwm-workspace-number 5)

     ;; Rebind Caps lock to control
     (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

     (require 'exwm-randr)
     (exwm-randr-enable)
     (start-process-shell-command "xrandr" nil "xrandr --output VIRTUAL1 --off --output DP3 --off --output DP2 --mode 1920x1080 --pos 0x0 --rotate normal --output DP1 --off --output HDMI3 --off --output HDMI2 --off --output HDMI1 --off")

     (require 'exwm-systemtray)
     (exwm-systemtray-enable)

     (setq exwm-input-prefix-keys
           '(?\C-x
             ?\C-u
           ?\C-h
           ?\M-x
           ?\M-`
           ?\M-:
           ?\M-&
           ?\C-\M-j
           ?\C-\ ))

     (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

     (setq exwm-input-global-keys
           `(
             ([?\s-r] . exwm-reset)
             ([s-left] . windmove-left)
             ([s-right] . windmove-right)
             ([s-up] . windmove-up)
             ([s-down] . windmove-down)
             ;; Launch applications via shell commands
             ([?\s-&] . (lambda (command)
                          (interactive (list (read-shell-command "$ ")))
                          (start-process-shell-command command nil command)))
             ;; Switch Workspace
           ([?\s-w] . exwm-workspace-switch)
           ([?\s-`] . (lambda () (interactive)
                        (exwm-workspace-switch-create 0)))

           ,@(mapcar (lambda (i)
                       `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                     (number-sequence 0 9))))
     (exwm-enable))
    )

#+end_src
* Applications
** Some App
#+begin_src conf-unix 

  value=<<the-value()>>

#+end_src

#+NAME: the-value
#+begin_src emacs-lisp
(+ 50 100)
#+end_src

Add =:noweb yes=!
